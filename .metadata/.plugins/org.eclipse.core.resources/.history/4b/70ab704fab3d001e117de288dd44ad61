package com.hoaxify.ws.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.hoaxify.ws.user.User;
import com.hoaxify.ws.user.UserRepository;
import com.hoaxify.ws.user.UserService;
import com.hoaxify.ws.user.vm.UserVM;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwt;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Service
public class AuthService {
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	PasswordEncoder passwordEncoder;
	
	public AuthResponse authenticate(Credentials credentials) {
		User inDb = userRepository.findByUsername(credentials.getUsername());
		if(inDb==null) { //user yoksa
			throw new AuthException();
		}
		boolean matches = passwordEncoder.matches(credentials.getPassword(), inDb.getPassword()); 
		if(!matches) { //Şifreler eşleşmezse
			throw new AuthException();
		}
		UserVM userVM = new UserVM(inDb);
		String token = Jwts.builder().setSubject(""+inDb.getId()).signWith(SignatureAlgorithm.HS512, "my-app-secret").compact();
		AuthResponse response = new AuthResponse();
		response.setToken(token);
		response.setUser(userVM);
		return response;

	}

	public UserDetails getUserDetails(String token) {
		JwtParser parser = Jwts.parser().setSigningKey("my-app-secret");
		try {
			parser.parse(token);
			Claims claims = parser.parseClaimsJws(token).getBody();
			long userId = Long.parseLong(claims.getSubject());
			User user = userRepository.getOne(userId);
		} catch (Exception e) {
			// TODO: handle exception
		}

		return null;
	}
	

	
}
