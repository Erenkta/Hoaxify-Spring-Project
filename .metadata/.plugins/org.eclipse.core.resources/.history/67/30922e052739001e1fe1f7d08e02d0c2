package com.hoaxify.ws.hoax;

import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.util.Streamable;
import org.springframework.stereotype.Service;

import com.hoaxify.ws.user.User;
import com.hoaxify.ws.user.UserService;

@Service
public class HoaxService {

	@Autowired
	HoaxRepository hoaxRepository;

	@Autowired
	UserService userService;
	

	public void save(Hoax hoax,User user) {
		hoax.setTimestamp(new Date());
		hoax.setUser(user);
		hoaxRepository.save(hoax);	
	}

	public Page<Hoax> getHoaxes(Pageable page) {
		return hoaxRepository.findAll(page);
	}

	public Page<Hoax> getUserHoax(String username,Pageable page) {	
		User inDB  = userService.getByUsername(username);
		return hoaxRepository.findByUser(inDB, page);
	}

	public Page<Hoax> getOldHoaxes(long id, String username, Pageable page) {
		Specification<Hoax> specification = idLessThan(id);
		if(username != null) {
			User inDb  = userService.getByUsername(username);
			specification = specification.and(userIs(inDb));
		}

		return hoaxRepository.findAll(specification, page);
		//return hoaxRepository.findByIdLessThan(id, page); specification'dan dolayı kaldırdık
	
	}

	public long getNewHoaxesCount(long id, String username) {
		if(username != null) {
			User inDb = userService.getByUsername(username);
			return hoaxRepository.countByIdGreaterThanAndUser(id,inDb);
		}
		return hoaxRepository.countByIdGreaterThan(id);
	}


	public List<Hoax> getNewHoaxes(long id, String username, Sort sort) {
		Specification<Hoax> specification = idGreaterThan(id);
		if(username !=null) {
			User inDb = userService.getByUsername(username);
			specification = specification.and(userIs(inDb));
		}
		return hoaxRepository.findAll(specification,sort);
	}

	
	Specification<Hoax> idLessThan(long id){
		return (root,query,criteriaBuilder)->{
			return criteriaBuilder.lessThan(root.get("id"), id); //Query specification
		};
	}
	Specification<Hoax> idGreaterThan(long id){
		return (root,query,criteriaBuilder)->{
			return criteriaBuilder.greaterThan(root.get("id"), id); //Query specification
		};
	}
	Specification<Hoax> userIs(User user){
		return (root,query,CriteriaBuilder)->{
			return CriteriaBuilder.equal(root.get("user"),user);
		};
	}
}
