package com.hoaxify.ws.file;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.UUID;

import org.apache.tika.Tika;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.hoaxify.ws.configuration.AppConfiguration;

@Service
public class FileService {
	
	/*@Value("${upload-path}") //Applicationç.yaml içerisinden otomatijk olarak çekecek
	String uploadPath; 
	*/ //Bunu yapmak yerine altta kendimizin oluşturduğu bir class sayesinde yaptık
	
	@AutoWired
	AppConfiguration appConfiguration;
	
	Tika tika = new Tika(); //Dosya tipi için bir framework
	


	public String writeBase64ToFile(String image) throws Exception {
		
		
		String fileName = generateRandomName();
		File target = new File(appConfiguration.getUploadPath()+"/"+fileName);
		OutputStream outputStream = new FileOutputStream(target);
		
		byte[] base64Encoded = Base64.getDecoder().decode(image);
		

		
		
		
		outputStream.write(base64Encoded);
		outputStream.close();
		return fileName;
	}
	
	public String generateRandomName() {
		return UUID.randomUUID().toString().replaceAll("-",""); // - Kullanarak oluşturduğu random karakterleri biz kaldırdık
	}

	public void deleteFile(String oldImageName) throws Exception {
		if(oldImageName == null) { //eğer eski fotosu yoksa yani daha önceden hiç foto koymamış olabilir ondan bunu yaptık
			return;
		}
		//String oldPath = appConfiguration.getUploadPath() + "/" + oldImageName; bunu direkt verebiliriz ya da
		Files.deleteIfExists(Paths.get(appConfiguration.getUploadPath(),oldImageName)); //şeklinde de olur
		
	}

	public String detectType(String value) {
		byte[] base64Encoded = Base64.getDecoder().decode(value);
		String fileType = tika.detect(base64Encoded);
		return null;
	}
}
