package com.hoaxify.ws.user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.hoaxify.ws.error.NotFoundException;
import com.hoaxify.ws.file.FileService;
import com.hoaxify.ws.hoax.HoaxService;
import com.hoaxify.ws.user.vm.UserUpdateVM;

@Service
public class UserService {
	
	UserRepository userRepository;
	
	PasswordEncoder passwordEncoder;
	
	FileService fileService;


	
	public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder,FileService fileService) {
		this.userRepository = userRepository;
		this.passwordEncoder = passwordEncoder;
		this.fileService = fileService ;
	}
	


	public void save(User user) {
		user.setPassword(this.passwordEncoder.encode(user.getPassword()));
		userRepository.save(user);
	}
	public Page<User> getUsers(Pageable page,User user){	//Pagination işlemi yapıldı
		if(user != null) {
			return userRepository.findByUsernameNot(user.getUsername(), page);
		}
		return userRepository.findAll(page); 
	}
	
	public User getByUsername(String username) {
		User userInDB = userRepository.findByUsername(username);
		if(userInDB == null) {
			throw new NotFoundException();
		}
		return userInDB;
	}

	public User updateUser(String username, UserUpdateVM updatedUser) throws Exception {
		User userInDB = userRepository.findByUsername(username);
		if(updatedUser.getImage() != null) {
			String oldImageName = userInDB.getImage();
			//userInDB.setImage(updatedUser.getImage());
			String storedFileName = fileService.writeBase64EncodedStringToFile(updatedUser.getImage());
			userInDB.setImage(storedFileName);
			fileService.deleteProfileImage(oldImageName);
		}
		userInDB.setDisplayName(updatedUser.getDisplayName());
		return userRepository.save(userInDB); //üstüne yazdı
		
	}

	public void deleteUser(String username) {
		User user = userRepository.findByUsername(username);
		fileService.deleteAllStoredFilesForUser(user);
		userRepository.deleteByUsername(username);
		
	}



}
