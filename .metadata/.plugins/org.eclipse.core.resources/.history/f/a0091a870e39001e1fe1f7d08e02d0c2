package com.hoaxify.ws.hoax;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hoaxify.ws.hoax.vm.HoaxVM;
import com.hoaxify.ws.shared.CurrentUser;
import com.hoaxify.ws.shared.GenericResponse;
import com.hoaxify.ws.user.User;
import com.hoaxify.ws.user.UserService;

@RestController
@RequestMapping("/api/1.0")
public class HoaxController {

	@Autowired
	HoaxService hoaxService;

	
	
	@PostMapping("/hoaxes")
	GenericResponse saveHoax(@Valid @RequestBody Hoax hoax,@CurrentUser User user) {
		 hoaxService.save(hoax,user);
		 return new GenericResponse("Hoax is saved");
	}
	
	@GetMapping("/hoaxes")
	Page<HoaxVM> getHoaxes(@PageableDefault(sort="id",direction = Direction.DESC) Pageable page){ //Bazı page parametreleri için default değerler set etmek istersek bu annotation'u kullanıyoruz
		return hoaxService.getHoaxes(page).map(HoaxVM::new);
	}
	@GetMapping("/hoaxes/{id:[0-9]+}")
	Page<HoaxVM> getHoaxesRelative(@PathVariable long id,@PageableDefault(sort="id",direction = Direction.DESC) Pageable page){ //Bazı page parametreleri için default değerler set etmek istersek bu annotation'u kullanıyoruz
		return hoaxService.getOldHoaxes(id,page).map(HoaxVM::new);
	}
	
	@GetMapping("users/{username}/hoaxes")
	Page<HoaxVM> getUserHoaxes(@PathVariable String username,@PageableDefault(sort="id",direction = Direction.DESC) Pageable page,
			@RequestParam(name = "count",required = false,defaultValue = false) boolean count){ //Bazı page parametreleri için default değerler set etmek istersek bu annotation'u kullanıyoruz
		if(count) {
			long newHoaxCount = hoaxService.getNewHoaxesCount(id);
		}
		return hoaxService.getUserHoax(username,page).map(HoaxVM::new);
	}
	@GetMapping("users/{username}/hoaxes/{id:[0-9]+}")
	Page<HoaxVM> getUserHoaxesRelative(@PathVariable long id,@PathVariable String username,@PageableDefault(sort="id",direction = Direction.DESC) Pageable page){ //Bazı page parametreleri için default değerler set etmek istersek bu annotation'u kullanıyoruz
		return hoaxService.getOldUserHoax(id,username,page).map(HoaxVM::new);
	}
}
